`include "B_DSP48E2_defines.vh"

reg [`DSP48E2_DATA_SZ-1:0] ATTR [0:`DSP48E2_ADDR_N-1];
reg [1:0] ACASCREG_REG = ACASCREG;
reg ADREG_REG = ADREG;
reg ALUMODEREG_REG = ALUMODEREG;
reg [8*2:1] AMULTSEL_REG = AMULTSEL;
reg [1:0] AREG_REG = AREG;
reg [8*15:1] AUTORESET_PATDET_REG = AUTORESET_PATDET;
reg [8*5:1] AUTORESET_PRIORITY_REG = AUTORESET_PRIORITY;
reg [8*7:1] A_INPUT_REG = A_INPUT;
reg [1:0] BCASCREG_REG = BCASCREG;
reg [8*2:1] BMULTSEL_REG = BMULTSEL;
reg [1:0] BREG_REG = BREG;
reg [8*7:1] B_INPUT_REG = B_INPUT;
reg CARRYINREG_REG = CARRYINREG;
reg CARRYINSELREG_REG = CARRYINSELREG;
reg CREG_REG = CREG;
reg DREG_REG = DREG;
reg INMODEREG_REG = INMODEREG;
reg [3:0] IS_ALUMODE_INVERTED_REG = IS_ALUMODE_INVERTED;
reg [0:0] IS_CARRYIN_INVERTED_REG = IS_CARRYIN_INVERTED;
reg [0:0] IS_CLK_INVERTED_REG = IS_CLK_INVERTED;
reg [4:0] IS_INMODE_INVERTED_REG = IS_INMODE_INVERTED;
reg [8:0] IS_OPMODE_INVERTED_REG = IS_OPMODE_INVERTED;
reg [0:0] IS_RSTALLCARRYIN_INVERTED_REG = IS_RSTALLCARRYIN_INVERTED;
reg [0:0] IS_RSTALUMODE_INVERTED_REG = IS_RSTALUMODE_INVERTED;
reg [0:0] IS_RSTA_INVERTED_REG = IS_RSTA_INVERTED;
reg [0:0] IS_RSTB_INVERTED_REG = IS_RSTB_INVERTED;
reg [0:0] IS_RSTCTRL_INVERTED_REG = IS_RSTCTRL_INVERTED;
reg [0:0] IS_RSTC_INVERTED_REG = IS_RSTC_INVERTED;
reg [0:0] IS_RSTD_INVERTED_REG = IS_RSTD_INVERTED;
reg [0:0] IS_RSTINMODE_INVERTED_REG = IS_RSTINMODE_INVERTED;
reg [0:0] IS_RSTM_INVERTED_REG = IS_RSTM_INVERTED;
reg [0:0] IS_RSTP_INVERTED_REG = IS_RSTP_INVERTED;
reg [47:0] MASK_REG = MASK;
reg MREG_REG = MREG;
reg OPMODEREG_REG = OPMODEREG;
reg [47:0] PATTERN_REG = PATTERN;
reg [8*1:1] PREADDINSEL_REG = PREADDINSEL;
reg PREG_REG = PREG;
reg [47:0] RND_REG = RND;
reg [8*14:1] SEL_MASK_REG = SEL_MASK;
reg [8*7:1] SEL_PATTERN_REG = SEL_PATTERN;
reg [8*8:1] USE_MULT_REG = USE_MULT;
reg [8*9:1] USE_PATTERN_DETECT_REG = USE_PATTERN_DETECT;
reg [8*6:1] USE_SIMD_REG = USE_SIMD;
reg [8*5:1] USE_WIDEXOR_REG = USE_WIDEXOR;
reg [8*11:1] XORSIMD_REG = XORSIMD;

initial begin
  ATTR[`DSP48E2__ACASCREG] = ACASCREG;
  ATTR[`DSP48E2__ADREG] = ADREG;
  ATTR[`DSP48E2__ALUMODEREG] = ALUMODEREG;
  ATTR[`DSP48E2__AMULTSEL] = AMULTSEL;
  ATTR[`DSP48E2__AREG] = AREG;
  ATTR[`DSP48E2__AUTORESET_PATDET] = AUTORESET_PATDET;
  ATTR[`DSP48E2__AUTORESET_PRIORITY] = AUTORESET_PRIORITY;
  ATTR[`DSP48E2__A_INPUT] = A_INPUT;
  ATTR[`DSP48E2__BCASCREG] = BCASCREG;
  ATTR[`DSP48E2__BMULTSEL] = BMULTSEL;
  ATTR[`DSP48E2__BREG] = BREG;
  ATTR[`DSP48E2__B_INPUT] = B_INPUT;
  ATTR[`DSP48E2__CARRYINREG] = CARRYINREG;
  ATTR[`DSP48E2__CARRYINSELREG] = CARRYINSELREG;
  ATTR[`DSP48E2__CREG] = CREG;
  ATTR[`DSP48E2__DREG] = DREG;
  ATTR[`DSP48E2__INMODEREG] = INMODEREG;
  ATTR[`DSP48E2__IS_ALUMODE_INVERTED] = IS_ALUMODE_INVERTED;
  ATTR[`DSP48E2__IS_CARRYIN_INVERTED] = IS_CARRYIN_INVERTED;
  ATTR[`DSP48E2__IS_CLK_INVERTED] = IS_CLK_INVERTED;
  ATTR[`DSP48E2__IS_INMODE_INVERTED] = IS_INMODE_INVERTED;
  ATTR[`DSP48E2__IS_OPMODE_INVERTED] = IS_OPMODE_INVERTED;
  ATTR[`DSP48E2__IS_RSTALLCARRYIN_INVERTED] = IS_RSTALLCARRYIN_INVERTED;
  ATTR[`DSP48E2__IS_RSTALUMODE_INVERTED] = IS_RSTALUMODE_INVERTED;
  ATTR[`DSP48E2__IS_RSTA_INVERTED] = IS_RSTA_INVERTED;
  ATTR[`DSP48E2__IS_RSTB_INVERTED] = IS_RSTB_INVERTED;
  ATTR[`DSP48E2__IS_RSTCTRL_INVERTED] = IS_RSTCTRL_INVERTED;
  ATTR[`DSP48E2__IS_RSTC_INVERTED] = IS_RSTC_INVERTED;
  ATTR[`DSP48E2__IS_RSTD_INVERTED] = IS_RSTD_INVERTED;
  ATTR[`DSP48E2__IS_RSTINMODE_INVERTED] = IS_RSTINMODE_INVERTED;
  ATTR[`DSP48E2__IS_RSTM_INVERTED] = IS_RSTM_INVERTED;
  ATTR[`DSP48E2__IS_RSTP_INVERTED] = IS_RSTP_INVERTED;
  ATTR[`DSP48E2__MASK] = MASK;
  ATTR[`DSP48E2__MREG] = MREG;
  ATTR[`DSP48E2__OPMODEREG] = OPMODEREG;
  ATTR[`DSP48E2__PATTERN] = PATTERN;
  ATTR[`DSP48E2__PREADDINSEL] = PREADDINSEL;
  ATTR[`DSP48E2__PREG] = PREG;
  ATTR[`DSP48E2__RND] = RND;
  ATTR[`DSP48E2__SEL_MASK] = SEL_MASK;
  ATTR[`DSP48E2__SEL_PATTERN] = SEL_PATTERN;
  ATTR[`DSP48E2__USE_MULT] = USE_MULT;
  ATTR[`DSP48E2__USE_PATTERN_DETECT] = USE_PATTERN_DETECT;
  ATTR[`DSP48E2__USE_SIMD] = USE_SIMD;
  ATTR[`DSP48E2__USE_WIDEXOR] = USE_WIDEXOR;
  ATTR[`DSP48E2__XORSIMD] = XORSIMD;
end

always @(trig_attr) begin
  ACASCREG_REG = ATTR[`DSP48E2__ACASCREG];
  ADREG_REG = ATTR[`DSP48E2__ADREG];
  ALUMODEREG_REG = ATTR[`DSP48E2__ALUMODEREG];
  AMULTSEL_REG = ATTR[`DSP48E2__AMULTSEL];
  AREG_REG = ATTR[`DSP48E2__AREG];
  AUTORESET_PATDET_REG = ATTR[`DSP48E2__AUTORESET_PATDET];
  AUTORESET_PRIORITY_REG = ATTR[`DSP48E2__AUTORESET_PRIORITY];
  A_INPUT_REG = ATTR[`DSP48E2__A_INPUT];
  BCASCREG_REG = ATTR[`DSP48E2__BCASCREG];
  BMULTSEL_REG = ATTR[`DSP48E2__BMULTSEL];
  BREG_REG = ATTR[`DSP48E2__BREG];
  B_INPUT_REG = ATTR[`DSP48E2__B_INPUT];
  CARRYINREG_REG = ATTR[`DSP48E2__CARRYINREG];
  CARRYINSELREG_REG = ATTR[`DSP48E2__CARRYINSELREG];
  CREG_REG = ATTR[`DSP48E2__CREG];
  DREG_REG = ATTR[`DSP48E2__DREG];
  INMODEREG_REG = ATTR[`DSP48E2__INMODEREG];
  IS_ALUMODE_INVERTED_REG = ATTR[`DSP48E2__IS_ALUMODE_INVERTED];
  IS_CARRYIN_INVERTED_REG = ATTR[`DSP48E2__IS_CARRYIN_INVERTED];
  IS_CLK_INVERTED_REG = ATTR[`DSP48E2__IS_CLK_INVERTED];
  IS_INMODE_INVERTED_REG = ATTR[`DSP48E2__IS_INMODE_INVERTED];
  IS_OPMODE_INVERTED_REG = ATTR[`DSP48E2__IS_OPMODE_INVERTED];
  IS_RSTALLCARRYIN_INVERTED_REG = ATTR[`DSP48E2__IS_RSTALLCARRYIN_INVERTED];
  IS_RSTALUMODE_INVERTED_REG = ATTR[`DSP48E2__IS_RSTALUMODE_INVERTED];
  IS_RSTA_INVERTED_REG = ATTR[`DSP48E2__IS_RSTA_INVERTED];
  IS_RSTB_INVERTED_REG = ATTR[`DSP48E2__IS_RSTB_INVERTED];
  IS_RSTCTRL_INVERTED_REG = ATTR[`DSP48E2__IS_RSTCTRL_INVERTED];
  IS_RSTC_INVERTED_REG = ATTR[`DSP48E2__IS_RSTC_INVERTED];
  IS_RSTD_INVERTED_REG = ATTR[`DSP48E2__IS_RSTD_INVERTED];
  IS_RSTINMODE_INVERTED_REG = ATTR[`DSP48E2__IS_RSTINMODE_INVERTED];
  IS_RSTM_INVERTED_REG = ATTR[`DSP48E2__IS_RSTM_INVERTED];
  IS_RSTP_INVERTED_REG = ATTR[`DSP48E2__IS_RSTP_INVERTED];
  MASK_REG = ATTR[`DSP48E2__MASK];
  MREG_REG = ATTR[`DSP48E2__MREG];
  OPMODEREG_REG = ATTR[`DSP48E2__OPMODEREG];
  PATTERN_REG = ATTR[`DSP48E2__PATTERN];
  PREADDINSEL_REG = ATTR[`DSP48E2__PREADDINSEL];
  PREG_REG = ATTR[`DSP48E2__PREG];
  RND_REG = ATTR[`DSP48E2__RND];
  SEL_MASK_REG = ATTR[`DSP48E2__SEL_MASK];
  SEL_PATTERN_REG = ATTR[`DSP48E2__SEL_PATTERN];
  USE_MULT_REG = ATTR[`DSP48E2__USE_MULT];
  USE_PATTERN_DETECT_REG = ATTR[`DSP48E2__USE_PATTERN_DETECT];
  USE_SIMD_REG = ATTR[`DSP48E2__USE_SIMD];
  USE_WIDEXOR_REG = ATTR[`DSP48E2__USE_WIDEXOR];
  XORSIMD_REG = ATTR[`DSP48E2__XORSIMD];
end

// procedures to override, read attribute values

task write_attr;
  input  [`DSP48E2_ADDR_SZ-1:0] addr;
  input  [`DSP48E2_DATA_SZ-1:0] data;
  begin
    ATTR[addr] = data;
    trig_attr = ~trig_attr; // to be removed
  end
endtask

function [`DSP48E2_DATA_SZ-1:0] read_attr;
  input  [`DSP48E2_ADDR_SZ-1:0] addr;
  begin
    read_attr = ATTR[addr];
  end
endfunction

task commit_attr;
  begin
    trig_attr = ~trig_attr;
  end
endtask
