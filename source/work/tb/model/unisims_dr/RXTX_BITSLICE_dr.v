`include "B_RXTX_BITSLICE_defines.vh"

reg [`RXTX_BITSLICE_DATA_SZ-1:0] ATTR [0:`RXTX_BITSLICE_ADDR_N-1];
reg [40:1] ENABLE_PRE_EMPHASIS_REG = ENABLE_PRE_EMPHASIS;
reg [40:1] FIFO_SYNC_MODE_REG = FIFO_SYNC_MODE;
reg INIT_REG = INIT;
reg IS_RX_CLK_INVERTED_REG = IS_RX_CLK_INVERTED;
reg IS_RX_RST_DLY_INVERTED_REG = IS_RX_RST_DLY_INVERTED;
reg IS_RX_RST_INVERTED_REG = IS_RX_RST_INVERTED;
reg IS_TX_CLK_INVERTED_REG = IS_TX_CLK_INVERTED;
reg IS_TX_RST_DLY_INVERTED_REG = IS_TX_RST_DLY_INVERTED;
reg IS_TX_RST_INVERTED_REG = IS_TX_RST_INVERTED;
reg [40:1] LOOPBACK_REG = LOOPBACK;
reg [40:1] NATIVE_ODELAY_BYPASS_REG = NATIVE_ODELAY_BYPASS;
reg [112:1] RX_DATA_TYPE_REG = RX_DATA_TYPE;
reg [3:0] RX_DATA_WIDTH_REG = RX_DATA_WIDTH;
reg [40:1] RX_DELAY_FORMAT_REG = RX_DELAY_FORMAT;
reg [64:1] RX_DELAY_TYPE_REG = RX_DELAY_TYPE;
reg [10:0] RX_DELAY_VALUE_REG = RX_DELAY_VALUE;
real RX_REFCLK_FREQUENCY_REG = RX_REFCLK_FREQUENCY;
reg [48:1] RX_UPDATE_MODE_REG = RX_UPDATE_MODE;
real SIM_VERSION_REG = SIM_VERSION;
reg [64:1] TBYTE_CTL_REG = TBYTE_CTL;
reg [3:0] TX_DATA_WIDTH_REG = TX_DATA_WIDTH;
reg [40:1] TX_DELAY_FORMAT_REG = TX_DELAY_FORMAT;
reg [64:1] TX_DELAY_TYPE_REG = TX_DELAY_TYPE;
reg [10:0] TX_DELAY_VALUE_REG = TX_DELAY_VALUE;
reg [40:1] TX_OUTPUT_PHASE_90_REG = TX_OUTPUT_PHASE_90;
real TX_REFCLK_FREQUENCY_REG = TX_REFCLK_FREQUENCY;
reg [48:1] TX_UPDATE_MODE_REG = TX_UPDATE_MODE;

initial begin
  ATTR[`RXTX_BITSLICE__ENABLE_PRE_EMPHASIS] = ENABLE_PRE_EMPHASIS;
  ATTR[`RXTX_BITSLICE__FIFO_SYNC_MODE] = FIFO_SYNC_MODE;
  ATTR[`RXTX_BITSLICE__INIT] = INIT;
  ATTR[`RXTX_BITSLICE__IS_RX_CLK_INVERTED] = IS_RX_CLK_INVERTED;
  ATTR[`RXTX_BITSLICE__IS_RX_RST_DLY_INVERTED] = IS_RX_RST_DLY_INVERTED;
  ATTR[`RXTX_BITSLICE__IS_RX_RST_INVERTED] = IS_RX_RST_INVERTED;
  ATTR[`RXTX_BITSLICE__IS_TX_CLK_INVERTED] = IS_TX_CLK_INVERTED;
  ATTR[`RXTX_BITSLICE__IS_TX_RST_DLY_INVERTED] = IS_TX_RST_DLY_INVERTED;
  ATTR[`RXTX_BITSLICE__IS_TX_RST_INVERTED] = IS_TX_RST_INVERTED;
  ATTR[`RXTX_BITSLICE__LOOPBACK] = LOOPBACK;
  ATTR[`RXTX_BITSLICE__NATIVE_ODELAY_BYPASS] = NATIVE_ODELAY_BYPASS;
  ATTR[`RXTX_BITSLICE__RX_DATA_TYPE] = RX_DATA_TYPE;
  ATTR[`RXTX_BITSLICE__RX_DATA_WIDTH] = RX_DATA_WIDTH;
  ATTR[`RXTX_BITSLICE__RX_DELAY_FORMAT] = RX_DELAY_FORMAT;
  ATTR[`RXTX_BITSLICE__RX_DELAY_TYPE] = RX_DELAY_TYPE;
  ATTR[`RXTX_BITSLICE__RX_DELAY_VALUE] = RX_DELAY_VALUE;
  ATTR[`RXTX_BITSLICE__RX_REFCLK_FREQUENCY] = $realtobits(RX_REFCLK_FREQUENCY);
  ATTR[`RXTX_BITSLICE__RX_UPDATE_MODE] = RX_UPDATE_MODE;
  ATTR[`RXTX_BITSLICE__SIM_VERSION] = $realtobits(SIM_VERSION);
  ATTR[`RXTX_BITSLICE__TBYTE_CTL] = TBYTE_CTL;
  ATTR[`RXTX_BITSLICE__TX_DATA_WIDTH] = TX_DATA_WIDTH;
  ATTR[`RXTX_BITSLICE__TX_DELAY_FORMAT] = TX_DELAY_FORMAT;
  ATTR[`RXTX_BITSLICE__TX_DELAY_TYPE] = TX_DELAY_TYPE;
  ATTR[`RXTX_BITSLICE__TX_DELAY_VALUE] = TX_DELAY_VALUE;
  ATTR[`RXTX_BITSLICE__TX_OUTPUT_PHASE_90] = TX_OUTPUT_PHASE_90;
  ATTR[`RXTX_BITSLICE__TX_REFCLK_FREQUENCY] = $realtobits(TX_REFCLK_FREQUENCY);
  ATTR[`RXTX_BITSLICE__TX_UPDATE_MODE] = TX_UPDATE_MODE;
end

always @(trig_attr) begin
  ENABLE_PRE_EMPHASIS_REG = ATTR[`RXTX_BITSLICE__ENABLE_PRE_EMPHASIS];
  FIFO_SYNC_MODE_REG = ATTR[`RXTX_BITSLICE__FIFO_SYNC_MODE];
  INIT_REG = ATTR[`RXTX_BITSLICE__INIT];
  IS_RX_CLK_INVERTED_REG = ATTR[`RXTX_BITSLICE__IS_RX_CLK_INVERTED];
  IS_RX_RST_DLY_INVERTED_REG = ATTR[`RXTX_BITSLICE__IS_RX_RST_DLY_INVERTED];
  IS_RX_RST_INVERTED_REG = ATTR[`RXTX_BITSLICE__IS_RX_RST_INVERTED];
  IS_TX_CLK_INVERTED_REG = ATTR[`RXTX_BITSLICE__IS_TX_CLK_INVERTED];
  IS_TX_RST_DLY_INVERTED_REG = ATTR[`RXTX_BITSLICE__IS_TX_RST_DLY_INVERTED];
  IS_TX_RST_INVERTED_REG = ATTR[`RXTX_BITSLICE__IS_TX_RST_INVERTED];
  LOOPBACK_REG = ATTR[`RXTX_BITSLICE__LOOPBACK];
  NATIVE_ODELAY_BYPASS_REG = ATTR[`RXTX_BITSLICE__NATIVE_ODELAY_BYPASS];
  RX_DATA_TYPE_REG = ATTR[`RXTX_BITSLICE__RX_DATA_TYPE];
  RX_DATA_WIDTH_REG = ATTR[`RXTX_BITSLICE__RX_DATA_WIDTH];
  RX_DELAY_FORMAT_REG = ATTR[`RXTX_BITSLICE__RX_DELAY_FORMAT];
  RX_DELAY_TYPE_REG = ATTR[`RXTX_BITSLICE__RX_DELAY_TYPE];
  RX_DELAY_VALUE_REG = ATTR[`RXTX_BITSLICE__RX_DELAY_VALUE];
  RX_REFCLK_FREQUENCY_REG = $bitstoreal(ATTR[`RXTX_BITSLICE__RX_REFCLK_FREQUENCY]);
  RX_UPDATE_MODE_REG = ATTR[`RXTX_BITSLICE__RX_UPDATE_MODE];
  SIM_VERSION_REG = $bitstoreal(ATTR[`RXTX_BITSLICE__SIM_VERSION]);
  TBYTE_CTL_REG = ATTR[`RXTX_BITSLICE__TBYTE_CTL];
  TX_DATA_WIDTH_REG = ATTR[`RXTX_BITSLICE__TX_DATA_WIDTH];
  TX_DELAY_FORMAT_REG = ATTR[`RXTX_BITSLICE__TX_DELAY_FORMAT];
  TX_DELAY_TYPE_REG = ATTR[`RXTX_BITSLICE__TX_DELAY_TYPE];
  TX_DELAY_VALUE_REG = ATTR[`RXTX_BITSLICE__TX_DELAY_VALUE];
  TX_OUTPUT_PHASE_90_REG = ATTR[`RXTX_BITSLICE__TX_OUTPUT_PHASE_90];
  TX_REFCLK_FREQUENCY_REG = $bitstoreal(ATTR[`RXTX_BITSLICE__TX_REFCLK_FREQUENCY]);
  TX_UPDATE_MODE_REG = ATTR[`RXTX_BITSLICE__TX_UPDATE_MODE];
end

// procedures to override, read attribute values

task write_attr;
  input  [`RXTX_BITSLICE_ADDR_SZ-1:0] addr;
  input  [`RXTX_BITSLICE_DATA_SZ-1:0] data;
  begin
    ATTR[addr] = data;
    trig_attr = ~trig_attr; // to be removed
  end
endtask

function [`RXTX_BITSLICE_DATA_SZ-1:0] read_attr;
  input  [`RXTX_BITSLICE_ADDR_SZ-1:0] addr;
  begin
    read_attr = ATTR[addr];
  end
endfunction

task commit_attr;
  begin
trig_attr = ~trig_attr;
  end
endtask
