<: :>
<: set ComponentName [getComponentNameString] :>
<: setOutputDirectory "./sim/" :>
<: setFileName ${ComponentName}_pkg :>
<: setFileExtension ".sv" :>
<: set c_protocol [get_property MODELPARAM_VALUE.C_AXI_PROTOCOL] :>
<: set c_read_write_mode [get_property PARAM_VALUE.READ_WRITE_MODE] :>
<: set c_interface_mode [get_property MODELPARAM_VALUE.C_AXI_INTERFACE_MODE] :>
<: set c_addr_width [get_property PARAM_VALUE.ADDR_WIDTH] :>
<: set c_data_width [get_property PARAM_VALUE.DATA_WIDTH] :>
<: set c_id_width [get_property PARAM_VALUE.ID_WIDTH] :>
<: set c_awuser_width [get_property PARAM_VALUE.AWUSER_WIDTH] :>
<: set c_aruser_width [get_property PARAM_VALUE.ARUSER_WIDTH] :>
<: set c_ruser_width [get_property PARAM_VALUE.RUSER_WIDTH] :>
<: set c_wuser_width [get_property PARAM_VALUE.WUSER_WIDTH] :>
<: set c_buser_width [get_property PARAM_VALUE.BUSER_WIDTH] :>
<: set c_ruser_bits_per_byte [get_property PARAM_VALUE.RUSER_BITS_PER_BYTE] :>
<: set c_wuser_bits_per_byte [get_property PARAM_VALUE.WUSER_BITS_PER_BYTE] :>
<: set c_has_user_bits_per_byte [get_property PARAM_VALUE.HAS_USER_BITS_PER_BYTE] :>
<: set c_supports_narrow [get_property PARAM_VALUE.SUPPORTS_NARROW] :>
<: set c_has_size [get_property PARAM_VALUE.HAS_SIZE] :>
<: set c_has_burst [get_property PARAM_VALUE.HAS_BURST] :>
<: set c_has_lock [get_property PARAM_VALUE.HAS_LOCK] :>
<: set c_has_cache [get_property PARAM_VALUE.HAS_CACHE] :>
<: set c_has_region [get_property PARAM_VALUE.HAS_REGION] :>
<: set c_has_qos [get_property PARAM_VALUE.HAS_QOS] :>
<: set c_has_prot [get_property PARAM_VALUE.HAS_PROT] :>
<: set c_has_wstrb [get_property PARAM_VALUE.HAS_WSTRB] :>
<: set c_has_bresp [get_property PARAM_VALUE.HAS_BRESP] :>
<: set c_has_rresp [get_property PARAM_VALUE.HAS_RRESP] :>
<: set c_has_aclken [get_property PARAM_VALUE.HAS_ACLKEN] :>
<: set c_has_aresetn [get_property PARAM_VALUE.HAS_ARESETN] :>
///////////////////////////////////////////////////////////////////////////
//NOTE: This file has been automatically generated by Vivado.
///////////////////////////////////////////////////////////////////////////
`timescale 1ps/1ps
package <=: ComponentName :>_pkg;
import axi_vip_pkg::*;
///////////////////////////////////////////////////////////////////////////
// These parameters are named after the component for use in your verification 
// environment.
///////////////////////////////////////////////////////////////////////////
      parameter <=: ComponentName :>_VIP_PROTOCOL           = <=: $c_protocol :>;
      parameter <=: ComponentName :>_VIP_READ_WRITE_MODE    = "<=: $c_read_write_mode :>";
      parameter <=: ComponentName :>_VIP_INTERFACE_MODE     = <=: $c_interface_mode :>;
      parameter <=: ComponentName :>_VIP_ADDR_WIDTH         = <=: $c_addr_width :>;
      parameter <=: ComponentName :>_VIP_DATA_WIDTH         = <=: $c_data_width :>;
      parameter <=: ComponentName :>_VIP_ID_WIDTH           = <=: $c_id_width :>;
      parameter <=: ComponentName :>_VIP_AWUSER_WIDTH       = <=: $c_awuser_width :>;
      parameter <=: ComponentName :>_VIP_ARUSER_WIDTH       = <=: $c_aruser_width :>;
      parameter <=: ComponentName :>_VIP_RUSER_WIDTH        = <=: $c_ruser_width :>;
      parameter <=: ComponentName :>_VIP_WUSER_WIDTH        = <=: $c_wuser_width :>;
      parameter <=: ComponentName :>_VIP_BUSER_WIDTH        = <=: $c_buser_width :>;
      parameter <=: ComponentName :>_VIP_SUPPORTS_NARROW    = <=: $c_supports_narrow :>;
      parameter <=: ComponentName :>_VIP_HAS_BURST          = <=: $c_has_burst :>;
      parameter <=: ComponentName :>_VIP_HAS_LOCK           = <=: $c_has_lock :>;
      parameter <=: ComponentName :>_VIP_HAS_CACHE          = <=: $c_has_cache :>;
      parameter <=: ComponentName :>_VIP_HAS_REGION         = <=: $c_has_region :>;
      parameter <=: ComponentName :>_VIP_HAS_QOS            = <=: $c_has_qos :>;
      parameter <=: ComponentName :>_VIP_HAS_PROT           = <=: $c_has_prot :>;
      parameter <=: ComponentName :>_VIP_HAS_WSTRB          = <=: $c_has_wstrb :>;
      parameter <=: ComponentName :>_VIP_HAS_BRESP          = <=: $c_has_bresp :>;
      parameter <=: ComponentName :>_VIP_HAS_RRESP          = <=: $c_has_rresp :>;
      parameter <=: ComponentName :>_VIP_HAS_ACLKEN         = <=: $c_has_aclken :>;
      parameter <=: ComponentName :>_VIP_HAS_ARESETN        = <=: $c_has_aresetn :>;
///////////////////////////////////////////////////////////////////////////
<: if {$c_interface_mode == 0} { :>
typedef axi_mst_agent #(<=: ComponentName :>_VIP_PROTOCOL, 
                        <=: ComponentName :>_VIP_ADDR_WIDTH,
                        <=: ComponentName :>_VIP_DATA_WIDTH,
                        <=: ComponentName :>_VIP_DATA_WIDTH,
                        <=: ComponentName :>_VIP_ID_WIDTH,
                        <=: ComponentName :>_VIP_ID_WIDTH,
                        <=: ComponentName :>_VIP_AWUSER_WIDTH, 
                        <=: ComponentName :>_VIP_WUSER_WIDTH, 
                        <=: ComponentName :>_VIP_BUSER_WIDTH, 
                        <=: ComponentName :>_VIP_ARUSER_WIDTH,
                        <=: ComponentName :>_VIP_RUSER_WIDTH, 
                        <=: ComponentName :>_VIP_SUPPORTS_NARROW, 
                        <=: ComponentName :>_VIP_HAS_BURST,
                        <=: ComponentName :>_VIP_HAS_LOCK,
                        <=: ComponentName :>_VIP_HAS_CACHE,
                        <=: ComponentName :>_VIP_HAS_REGION,
                        <=: ComponentName :>_VIP_HAS_PROT,
                        <=: ComponentName :>_VIP_HAS_QOS,
                        <=: ComponentName :>_VIP_HAS_WSTRB,
                        <=: ComponentName :>_VIP_HAS_BRESP,
                        <=: ComponentName :>_VIP_HAS_RRESP,
                        <=: ComponentName :>_VIP_HAS_ARESETN) <=: ComponentName :>_mst_t;
      
///////////////////////////////////////////////////////////////////////////
// How to start the verification component
///////////////////////////////////////////////////////////////////////////
//      <=: ComponentName :>_mst_t  <=: ComponentName :>_mst;
//      initial begin : START_<=: ComponentName :>_MASTER
//        <=: ComponentName :>_mst = new("<=: ComponentName :>_mst", `<=: ComponentName :>_PATH_TO_INTERFACE);
//        <=: ComponentName :>_mst.start_master();
//      end
<: } :>

<: if {$c_interface_mode == 1} { :>
typedef axi_passthrough_agent #(<=: ComponentName :>_VIP_PROTOCOL, 
                                <=: ComponentName :>_VIP_ADDR_WIDTH,
                                <=: ComponentName :>_VIP_DATA_WIDTH,
                                <=: ComponentName :>_VIP_DATA_WIDTH,
                                <=: ComponentName :>_VIP_ID_WIDTH,
                                <=: ComponentName :>_VIP_ID_WIDTH,
                                <=: ComponentName :>_VIP_AWUSER_WIDTH, 
                                <=: ComponentName :>_VIP_WUSER_WIDTH, 
                                <=: ComponentName :>_VIP_BUSER_WIDTH, 
                                <=: ComponentName :>_VIP_ARUSER_WIDTH,
                                <=: ComponentName :>_VIP_RUSER_WIDTH, 
                                <=: ComponentName :>_VIP_SUPPORTS_NARROW, 
                                <=: ComponentName :>_VIP_HAS_BURST,
                                <=: ComponentName :>_VIP_HAS_LOCK,
                                <=: ComponentName :>_VIP_HAS_CACHE,
                                <=: ComponentName :>_VIP_HAS_REGION,
                                <=: ComponentName :>_VIP_HAS_PROT,
                                <=: ComponentName :>_VIP_HAS_QOS,
                                <=: ComponentName :>_VIP_HAS_WSTRB,
                                <=: ComponentName :>_VIP_HAS_BRESP,
                                <=: ComponentName :>_VIP_HAS_RRESP,
                                <=: ComponentName :>_VIP_HAS_ARESETN) <=: ComponentName :>_passthrough_t;

typedef axi_passthrough_mem_agent #(<=: ComponentName :>_VIP_PROTOCOL, 
                                <=: ComponentName :>_VIP_ADDR_WIDTH,
                                <=: ComponentName :>_VIP_DATA_WIDTH,
                                <=: ComponentName :>_VIP_DATA_WIDTH,
                                <=: ComponentName :>_VIP_ID_WIDTH,
                                <=: ComponentName :>_VIP_ID_WIDTH,
                                <=: ComponentName :>_VIP_AWUSER_WIDTH, 
                                <=: ComponentName :>_VIP_WUSER_WIDTH, 
                                <=: ComponentName :>_VIP_BUSER_WIDTH, 
                                <=: ComponentName :>_VIP_ARUSER_WIDTH,
                                <=: ComponentName :>_VIP_RUSER_WIDTH, 
                                <=: ComponentName :>_VIP_SUPPORTS_NARROW, 
                                <=: ComponentName :>_VIP_HAS_BURST,
                                <=: ComponentName :>_VIP_HAS_LOCK,
                                <=: ComponentName :>_VIP_HAS_CACHE,
                                <=: ComponentName :>_VIP_HAS_REGION,
                                <=: ComponentName :>_VIP_HAS_PROT,
                                <=: ComponentName :>_VIP_HAS_QOS,
                                <=: ComponentName :>_VIP_HAS_WSTRB,
                                <=: ComponentName :>_VIP_HAS_BRESP,
                                <=: ComponentName :>_VIP_HAS_RRESP,
                                <=: ComponentName :>_VIP_HAS_ARESETN) <=: ComponentName :>_passthrough_mem_t;

///////////////////////////////////////////////////////////////////////////
// How to start the verification component
///////////////////////////////////////////////////////////////////////////
//      <=: ComponentName :>_passthrough_t  <=: ComponentName :>_passthrough;
//      initial begin : START_<=: ComponentName :>_SLAVE
//        <=: ComponentName :>_passthrough = new("<=: ComponentName :>_passthrough", `<=: ComponentName :>_PATH_TO_INTERFACE);
//        <=: ComponentName :>_passthrough.start_master(); //passthrough in run time master mode
//        <=: ComponentName :>_passthrough.start_slave(); //passthrough in run time slave mode
//      end
<: } :>

<: if {$c_interface_mode == 2} { :>
typedef axi_slv_agent #(<=: ComponentName :>_VIP_PROTOCOL, 
                        <=: ComponentName :>_VIP_ADDR_WIDTH,
                        <=: ComponentName :>_VIP_DATA_WIDTH,
                        <=: ComponentName :>_VIP_DATA_WIDTH,
                        <=: ComponentName :>_VIP_ID_WIDTH,
                        <=: ComponentName :>_VIP_ID_WIDTH,
                        <=: ComponentName :>_VIP_AWUSER_WIDTH, 
                        <=: ComponentName :>_VIP_WUSER_WIDTH, 
                        <=: ComponentName :>_VIP_BUSER_WIDTH, 
                        <=: ComponentName :>_VIP_ARUSER_WIDTH,
                        <=: ComponentName :>_VIP_RUSER_WIDTH, 
                        <=: ComponentName :>_VIP_SUPPORTS_NARROW, 
                        <=: ComponentName :>_VIP_HAS_BURST,
                        <=: ComponentName :>_VIP_HAS_LOCK,
                        <=: ComponentName :>_VIP_HAS_CACHE,
                        <=: ComponentName :>_VIP_HAS_REGION,
                        <=: ComponentName :>_VIP_HAS_PROT,
                        <=: ComponentName :>_VIP_HAS_QOS,
                        <=: ComponentName :>_VIP_HAS_WSTRB,
                        <=: ComponentName :>_VIP_HAS_BRESP,
                        <=: ComponentName :>_VIP_HAS_RRESP,
                        <=: ComponentName :>_VIP_HAS_ARESETN) <=: ComponentName :>_slv_t;

typedef axi_slv_mem_agent #(<=: ComponentName :>_VIP_PROTOCOL, 
                        <=: ComponentName :>_VIP_ADDR_WIDTH,
                        <=: ComponentName :>_VIP_DATA_WIDTH,
                        <=: ComponentName :>_VIP_DATA_WIDTH,
                        <=: ComponentName :>_VIP_ID_WIDTH,
                        <=: ComponentName :>_VIP_ID_WIDTH,
                        <=: ComponentName :>_VIP_AWUSER_WIDTH, 
                        <=: ComponentName :>_VIP_WUSER_WIDTH, 
                        <=: ComponentName :>_VIP_BUSER_WIDTH, 
                        <=: ComponentName :>_VIP_ARUSER_WIDTH,
                        <=: ComponentName :>_VIP_RUSER_WIDTH, 
                        <=: ComponentName :>_VIP_SUPPORTS_NARROW, 
                        <=: ComponentName :>_VIP_HAS_BURST,
                        <=: ComponentName :>_VIP_HAS_LOCK,
                        <=: ComponentName :>_VIP_HAS_CACHE,
                        <=: ComponentName :>_VIP_HAS_REGION,
                        <=: ComponentName :>_VIP_HAS_PROT,
                        <=: ComponentName :>_VIP_HAS_QOS,
                        <=: ComponentName :>_VIP_HAS_WSTRB,
                        <=: ComponentName :>_VIP_HAS_BRESP,
                        <=: ComponentName :>_VIP_HAS_RRESP,
                        <=: ComponentName :>_VIP_HAS_ARESETN) <=: ComponentName :>_slv_mem_t;
                        
      
///////////////////////////////////////////////////////////////////////////
// How to start the verification component
///////////////////////////////////////////////////////////////////////////
//      <=: ComponentName :>_slv_t  <=: ComponentName :>_slv;
//      initial begin : START_<=: ComponentName :>_SLAVE
//        <=: ComponentName :>_slv = new("<=: ComponentName :>_slv", `<=: ComponentName :>_PATH_TO_INTERFACE);
//        <=: ComponentName :>_slv.start_slave();
//      end
<: } :>

endpackage : <=: ComponentName :>_pkg
